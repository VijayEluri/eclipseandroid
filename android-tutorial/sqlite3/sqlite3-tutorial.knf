=== [ topic ][ sqlite3 ][ general ] ===
[ --- start ---- ]
- support TEXT, INTEGER, REAL(similar to double in java)
- no type checking, can write integer to string column
- database xxx.db created will be stored @ DATA_str/data/APP_NAME/databases/xxx.db
  DATA_str = Environment.getDataDirectory();
- import android.database.sqlite ;
[ ---  end  ---- ]

=== [ topic ][ query ] ===
[ --- start ---- ]
/// raw query
Cursor cursor = getReadableDatabase().
  rawQuery("select * from todo where _id = ?", new String[] { id });

/// query using phrase/parameter
database.query(DATABASE_TABLE,
  new String[] { KEY_ROWID, KEY_CATEGORY, KEY_SUMMARY, KEY_DESCRIPTION },
  null, null, null, null, null);
/// param
String dbName	The table name to compile the query against.
String[] columnNames	A list of which table columns to return. Passing "null" will return all columns.
String whereClause	Where-clause, i.e. filter for the selection of data, null will select all data.
String[] selectionArgs	You may include ?s in the "whereClause"". These placeholders will get replaced by the values from the selectionArgs array.
String[] groupBy	A filter declaring how to group rows, null will cause the rows to not be grouped.
String[] having	Filter for the groups, null means no filter.
String[] orderBy	Table columns which will be used to order the data, null means no ordering.
/// If a condition is not required, put null
/// The "whereClause" is specified without the word "where", for example a "where" statement might look like: "_id=19 and summary=?".
/// If you specify placeholder values in the where clause via ?, you pass them as the selectionArgs parameter to the query.

[ ---  end  ---- ]

=== [ topic ][ cursor ] ===
[ --- start ---- ]
- a query return a Cursor object
- a Cursor also point to one row of the query result
getCount()    - count number of total elements of the resulting query
moveToFirst() - 
moveToNext()  - 
getLong(columnIndex)
getString(columnIndex) - access the column data for the current position of the result
getColumnIndexOrThrow(ColumnNameString) - return the column index of ColumnNameString
[ ---  end  ---- ]

=== [ topic ][ ListView ][ SimpleCursorAdapter ] ===
[ --- start ---- ]
[ ---  end  ---- ]

=== [ topic ][ SQLiteOpenHelper ] ===
[ --- start ---- ]
- open database if it exists
- creating it if it does NOT
- and upgrading it as necessary
- Transactions are used to make sure the database is always in a sensible state.
public SQLiteOpenHelper (Context context, String name, SQLiteDatabase.CursorFactory factory, int version, DatabaseErrorHandler errorHandler)
- Create a helper object to create, open, and/or manage a database. 
- The database is not actually created or opened until one of getWritableDatabase() or getReadableDatabase() is called.
public SQLiteDatabase getWritableDatabase ()
- the first time getWritableDatabase is called, onCreate() and/or onOpen() will be called


[ ---  end  ---- ]

=== [ topic ][ sqlite3 ][ command line ] ===
[ --- start ---- ]
sqlite3

sqlite3 settings.db
sqlite> .tables
sqlite> .headers ON
sqlite> select * from system;
_id|name|value
1|volume_music|11
3|volume_system|7
4|volume_voice|4
5|volume_alarm|6
6|volume_notification|5
update system set value=1 where _id=12;
update system set value=0 where name="stay_on_while_plugged_in";

sqlite> PRAGMA table_info(table_name);   /// show the columns name


[ gui ]
sqlitebrowser


[ example ]
1)
sqlite3 ns-price.db
2)
create table sg ( code int NOT NULL PRIMARY KEY, category int, name_EN varchar(255), name_CN varchar(255), retail double, wholesale double, wholesale_psv double, aro double, aro_psv double, fsp double, fsp_psv double, effective_date date, update_src int);
3)
insert into "sg" values (37182365, 4, "ageLOC Galvanic Spa Face Pack 1000PSV", "ageLOC微电流美颜Spa美容1000PSV配套", 8580.00, 6000.00, 1558.00, 4800.00, 1000.00, null, null, "2013-05-01", 1);


[ command line ]
$ sqlite3 test.db  "create table t1 (t1key INTEGER
                  PRIMARY KEY,data TEXT,num double,timeEnter DATE);"
$ sqlite3 test.db  "insert into t1 (data,num) values ('This is sample data',3);"
$ sqlite3 test.db  "select * from t1 limit 2";
[ ---  end  ---- ]

=== [ java:topic ][ create table ] ===
[ --- start ---- ]
private static final String CREATE_TABLE_1 =
" create table " + table1 +
" (_id integer primary key autoincrement," +
" title text not null, body text not null);";

private static final String CREATE_TABLE_2 =
" create table " + TAGS_TABLE +
" (_id integer primary key autoincrement," +
" tagName text not null)";
@Override
public void onCreate(SQLiteDatabase db) { 
	db.execSQL(CREATE_TABLE_1); 
	db.execSQL(CREATE_TABLE_2);
	}
[ ---  end  ---- ]

=== [ java:topic ][ check if database exists ] ===
[ --- start ---- ]
-------------------- [ check if a database exists ] start -------------------- 
public boolean isTableExists(String tableName, boolean openDb) {
    if(openDb) {
        if(mDatabase == null || !mDatabase.isOpen()) {
            mDatabase = getReadableDatabase();
        }

        if(!mDatabase.isReadOnly()) {
            mDatabase.close();
            mDatabase = getReadableDatabase();
        }
    }

    Cursor cursor = mDatabase.rawQuery("select DISTINCT tbl_name from sqlite_master where tbl_name = '"+tableName+"'", null);
    if(cursor!=null) {
        if(cursor.getCount()>0) {
                            cursor.close();
            return true;
        }
                    cursor.close();
    }
    return false;
}

[ ---  end  ---- ]
