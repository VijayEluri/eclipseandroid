=== [ topic ][ sqlite3 ][ general ] ===
[ --- start ---- ]
- support TEXT, INTEGER, REAL(similar to double in java)
- no type checking, can write integer to string column
- database xxx.db created will be stored @ DATA_str/data/APP_NAME/databases/xxx.db
  DATA_str = Environment.getDataDirectory();
- import android.database.sqlite ;
[ ---  end  ---- ]

=== [ topic ][ query ] ===
[ --- start ---- ]
/// raw query
Cursor cursor = getReadableDatabase().
  rawQuery("select * from todo where _id = ?", new String[] { id });

/// query using phrase/parameter
database.query(DATABASE_TABLE,
  new String[] { KEY_ROWID, KEY_CATEGORY, KEY_SUMMARY, KEY_DESCRIPTION },
  null, null, null, null, null);
/// param
String dbName	The table name to compile the query against.
String[] columnNames	A list of which table columns to return. Passing "null" will return all columns.
String whereClause	Where-clause, i.e. filter for the selection of data, null will select all data.
String[] selectionArgs	You may include ?s in the "whereClause"". These placeholders will get replaced by the values from the selectionArgs array.
String[] groupBy	A filter declaring how to group rows, null will cause the rows to not be grouped.
String[] having	Filter for the groups, null means no filter.
String[] orderBy	Table columns which will be used to order the data, null means no ordering.
/// If a condition is not required, put null
/// The "whereClause" is specified without the word "where", for example a "where" statement might look like: "_id=19 and summary=?".
/// If you specify placeholder values in the where clause via ?, you pass them as the selectionArgs parameter to the query.

[ ---  end  ---- ]

=== [ topic ][ cursor ] ===
[ --- start ---- ]
- a query return a Cursor object
- a Cursor also point to one row of the query result
getCount()    - count number of total elements of the resulting query
moveToFirst() - 
moveToNext()  - 
getLong(columnIndex)
getString(columnIndex) - access the column data for the current position of the result
getColumnIndexOrThrow(ColumnNameString) - return the column index of ColumnNameString
[ ---  end  ---- ]

=== [ topic ][ ListView ][ SimpleCursorAdapter ] ===
[ --- start ---- ]
[ ---  end  ---- ]

=== [ topic ][ SQLiteOpenHelper ] ===
[ --- start ---- ]
- open database if it exists
- creating it if it does NOT
- and upgrading it as necessary
- Transactions are used to make sure the database is always in a sensible state.
- It is good practice to create a separate class per table. This class defines static onCreate() and onUpgrade() methods.
  These methods are called in the corresponding methods of SQLiteOpenHelper.
  This way your implementation of SQLiteOpenHelper stays readable, even if you have several tables.
public SQLiteOpenHelper (Context context, String name, SQLiteDatabase.CursorFactory factory, int version, DatabaseErrorHandler errorHandler)
- Create a helper object to create, open, and/or manage a database.
- The database is not actually created or opened until one of getWritableDatabase() or getReadableDatabase() is called.
public SQLiteDatabase getWritableDatabase ()
- the first time getWritableDatabase is called, onCreate() and/or onOpen() will be called


[ ---  end  ---- ]

=== [ topic ][ sqlite3 ][ command line ] ===
[ --- start ---- ]
sqlite3

sqlite3 settings.db
sqlite> .tables
sqlite> .headers ON
sqlite> select * from system;
_id|name|value
1|volume_music|11
3|volume_system|7
4|volume_voice|4
5|volume_alarm|6
6|volume_notification|5
update system set value=1 where _id=12;
update system set value=0 where name="stay_on_while_plugged_in";

sqlite> PRAGMA table_info(table_name);   /// show the columns name


[ gui ]
sqlitebrowser


[ example ]
1)
sqlite3 ns-price.db
2)
create table sg ( code int NOT NULL PRIMARY KEY, category int, name_EN varchar(255), name_CN varchar(255), retail double, wholesale double, wholesale_psv double, aro double, aro_psv double, fsp double, fsp_psv double, effective_date date, update_src int);
3)
insert into "sg" values (37182365, 4, "ageLOC Galvanic Spa Face Pack 1000PSV", "ageLOC微电流美颜Spa美容1000PSV配套", 8580.00, 6000.00, 1558.00, 4800.00, 1000.00, null, null, "2013-05-01", 1);


[ command line ]
$ sqlite3 test.db  "create table t1 (t1key INTEGER
                  PRIMARY KEY,data TEXT,num double,timeEnter DATE);"
$ sqlite3 test.db  "insert into t1 (data,num) values ('This is sample data',3);"
$ sqlite3 test.db  "select * from t1 limit 2";
[ ---  end  ---- ]

=== [ java:topic ][ create table ] ===
[ --- start ---- ]
private static final String CREATE_TABLE_1 =
" create table " + table1 +
" (_id integer primary key autoincrement," +
" title text not null, body text not null);";

private static final String CREATE_TABLE_2 =
" create table " + TAGS_TABLE +
" (_id integer primary key autoincrement," +
" tagName text not null)";
@Override
public void onCreate(SQLiteDatabase db) { 
	db.execSQL(CREATE_TABLE_1); 
	db.execSQL(CREATE_TABLE_2);
	}
[ ---  end  ---- ]

=== [ java:topic ][ check if database exists ] ===
[ --- start ---- ]
-------------------- [ check if a database exists ] start -------------------- 
public boolean isTableExists(String tableName, boolean openDb) {
    if(openDb) {
        if(mDatabase == null || !mDatabase.isOpen()) {
            mDatabase = getReadableDatabase();
        }

        if(!mDatabase.isReadOnly()) {
            mDatabase.close();
            mDatabase = getReadableDatabase();
        }
    }

    Cursor cursor = mDatabase.rawQuery("select DISTINCT tbl_name from sqlite_master where tbl_name = '"+tableName+"'", null);
    if(cursor!=null) {
        if(cursor.getCount()>0) {
                            cursor.close();
            return true;
        }
                    cursor.close();
    }
    return false;
}

[ ---  end  ---- ]

=== [ java:topic ][ example1 ] ===
[ --- start ---- ]

/// ## MySQLiteHelper start
package de.vogella.android.sqlite.first;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

public class MySQLiteHelper extends SQLiteOpenHelper {

  public static final String TABLE_COMMENTS = "comments";
  public static final String COLUMN_ID = "_id";
  public static final String COLUMN_COMMENT = "comment";

  private static final String DATABASE_NAME = "commments.db";
  private static final int DATABASE_VERSION = 1;

  // Database creation sql statement
  private static final String DATABASE_CREATE = "create table "
      + TABLE_COMMENTS + "(" + COLUMN_ID
      + " integer primary key autoincrement, " + COLUMN_COMMENT
      + " text not null);";

  public MySQLiteHelper(Context context) {
    super(context, DATABASE_NAME, null, DATABASE_VERSION);
  }

  @Override
  public void onCreate(SQLiteDatabase database) {
    database.execSQL(DATABASE_CREATE);
  }

  @Override
  public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
    Log.w(MySQLiteHelper.class.getName(),
        "Upgrading database from version " + oldVersion + " to "
            + newVersion + ", which will destroy all old data");
    db.execSQL("DROP TABLE IF EXISTS " + TABLE_COMMENTS);
    onCreate(db);
  }

}
/// ## MySQLiteHelper end

/// ## Comment start
package de.vogella.android.sqlite.first;

public class Comment {
  private long id;
  private String comment;

  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  // Will be used by the ArrayAdapter in the ListView
  @Override
  public String toString() {
    return comment;
  }
}
/// ## Comment end

/// ## Comment Data Source start
package de.vogella.android.sqlite.first;

import java.util.ArrayList;
import java.util.List;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;

public class CommentsDataSource {

  // Database fields
  private SQLiteDatabase database;
  private MySQLiteHelper dbHelper;
  private String[] allColumns = { MySQLiteHelper.COLUMN_ID,
      MySQLiteHelper.COLUMN_COMMENT };

  public CommentsDataSource(Context context) {
    dbHelper = new MySQLiteHelper(context);
  }

  public void open() throws SQLException {
	  /// invoke SQLiteOpenHelper.onCreate()
    database = dbHelper.getWritableDatabase();
  }

  public void close() {
    dbHelper.close();
  }

  public Comment createComment(String comment) {
    ContentValues values = new ContentValues();
    values.put(MySQLiteHelper.COLUMN_COMMENT, comment);
    long insertId = database.insert(MySQLiteHelper.TABLE_COMMENTS, null,
        values);
    Cursor cursor = database.query(MySQLiteHelper.TABLE_COMMENTS,
        allColumns, MySQLiteHelper.COLUMN_ID + " = " + insertId, null,
        null, null, null);
    cursor.moveToFirst();
    Comment newComment = cursorToComment(cursor);
    cursor.close();
    return newComment;
  }

  public void deleteComment(Comment comment) {
    long id = comment.getId();
    System.out.println("Comment deleted with id: " + id);
    database.delete(MySQLiteHelper.TABLE_COMMENTS, MySQLiteHelper.COLUMN_ID
        + " = " + id, null);
  }

  public List<Comment> getAllComments() {
    List<Comment> comments = new ArrayList<Comment>();

    Cursor cursor = database.query(MySQLiteHelper.TABLE_COMMENTS,
        allColumns, null, null, null, null, null);

    cursor.moveToFirst();
    while (!cursor.isAfterLast()) {
      Comment comment = cursorToComment(cursor);
      comments.add(comment);
      cursor.moveToNext();
    }
    // Make sure to close the cursor
    cursor.close();
    return comments;
  }

  private Comment cursorToComment(Cursor cursor) {
    Comment comment = new Comment();
    comment.setId(cursor.getLong(0));
    comment.setComment(cursor.getString(1));
    return comment;
  }
}
/// ## Comment Data Source end

/// ## res/layout/main.xml start
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical" >

    <LinearLayout
        android:id="@+id/group"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content" >

        <Button
            android:id="@+id/add"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Add New"
            android:onClick="onClick"/>

        <Button
            android:id="@+id/delete"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Delete First"
            android:onClick="onClick"/>
    </LinearLayout>

    <ListView
        android:id="@android:id/list"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="@string/hello" />

</LinearLayout>
/// ## res/layout/main.xml end

/// ## MainActivity start
package de.vogella.android.sqlite.first;

import java.util.List;
import java.util.Random;

import android.app.ListActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.ArrayAdapter;

public class TestDatabaseActivity extends ListActivity {
  private CommentsDataSource datasource;

  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    datasource = new CommentsDataSource(this);
    datasource.open();

    List<Comment> values = datasource.getAllComments();

    // Use the SimpleCursorAdapter to show the
    // elements in a ListView
    ArrayAdapter<Comment> adapter = new ArrayAdapter<Comment>(this,
        android.R.layout.simple_list_item_1, values);
    setListAdapter(adapter);
  }

  // Will be called via the onClick attribute
  // of the buttons in main.xml
  public void onClick(View view) {
    @SuppressWarnings("unchecked")
    ArrayAdapter<Comment> adapter = (ArrayAdapter<Comment>) getListAdapter();
    Comment comment = null;
    switch (view.getId()) {
    case R.id.add:
      String[] comments = new String[] { "Cool", "Very nice", "Hate it" };
      int nextInt = new Random().nextInt(3);
      // Save the new comment to the database
      comment = datasource.createComment(comments[nextInt]);
      adapter.add(comment);
      break;
    case R.id.delete:
      if (getListAdapter().getCount() > 0) {
        comment = (Comment) getListAdapter().getItem(0);
        datasource.deleteComment(comment);
        adapter.remove(comment);
      }
      break;
    }
    adapter.notifyDataSetChanged();
  }

  @Override
  protected void onResume() {
    datasource.open();
    super.onResume();
  }

  @Override
  protected void onPause() {
    datasource.close();
    super.onPause();
  }

}
/// ## MainActivity end

[ ---  end  ---- ]
