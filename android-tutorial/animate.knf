=== [ java:topic ][ alpha ] ===
[ --- start ---- ]
AnimatorListener animeListener;
animeListener = new AnimatorListener() {

	@Override
	public void onAnimationCancel(Animator animation) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onAnimationEnd(Animator animation) {
		TextView view_login = (TextView) findViewById(R.id.txt_login);
		view_login.setAlpha(1);

	}

	@Override
	public void onAnimationRepeat(Animator animation) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onAnimationStart(Animator animation) {
		// TODO Auto-generated method stub

	}
};

TextView view_login = (TextView) findViewById(R.id.txt_login);
view_login.setText("password incorrect. Try again");
//view_login.setAlpha(1);
ObjectAnimator anime =
	ObjectAnimator.ofFloat(view_login, "alpha", 0);
anime.addListener(animeListener);
anime.setDuration(2000);
anime.start();
[ ---  end  ---- ]

=== [ xml:topic ][ animate gif ] ===
[ --- start ---- ]
[ xml ][ image ][ gif ][ animated ]
duration is in ms

create a animated.xml
xmlns:android="http://schemas.android.com/apk/res/android"
<animation-list android:id="selected" android:oneshot="false">
<item android:drawable="@drawable/connected01" android:duration="50" />
<item android:drawable="@drawable/connected02" android:duration="50" />
<item android:drawable="@drawable/connected03" android:duration="50" />
<item android:drawable="@drawable/connected04" android:duration="50" />
<item android:drawable="@drawable/connected05" android:duration="50" />
</animation-list>

then use it
    <ImageView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:src="@layout/animate_thinking" />


 // Load the ImageView that will host the animation and
 // set its background to our AnimationDrawable XML resource.
 ImageView img = (ImageView)findViewById(R.id.spinning_wheel_image);
 img.setBackgroundResource(R.drawable.spin_animation);

 // Get the background, which has been compiled to an AnimationDrawable object.
 AnimationDrawable frameAnimation = (AnimationDrawable) img.getBackground();

 // Start the animation (looped playback by default).
 frameAnimation.start();

 /// extra note: animation start best not to called in onCreate
 /// using a timer, the delay might be different in different devices
 /// best is during onWindowFocusChanged
	@Override
	public void onWindowFocusChanged (boolean hasFocus) {
		super.onWindowFocusChanged(hasFocus);
		AnimationDrawable frameAnimation = 
			(AnimationDrawable) animation.getBackground();
		if(hasFocus) {
			frameAnimation.start();
		} else {
			frameAnimation.stop();
		}
	}
}
[ ---  end  ---- ]

=== [ java:topic ][ onTouchEvent ] ===
[ --- start ---- ]
AnimationDrawable rocketAnimation;

public void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);

  ImageView rocketImage = (ImageView) findViewById(R.id.rocket_image);
  rocketImage.setBackgroundResource(R.drawable.rocket_thrust);
  rocketAnimation = (AnimationDrawable) rocketImage.getBackground();
}

public boolean onTouchEvent(MotionEvent event) {
  if (event.getAction() == MotionEvent.ACTION_DOWN) {
    rocketAnimation.start();
    return true;
  }
  return super.onTouchEvent(event);
}
[ ---  end  ---- ]

=== [ xml:topic ][ translate ] ===
[ --- start ---- ]
/// file store @ res/anim/incorrect_shake.xml
/// "p" in -5%p means relative to parent (5% of parent's width)
/// android:startOffset means this action wait after xx ms then start
<?xml version="1.0" encoding="utf-8"?>
<set xmlns:android="http://schemas.android.com/apk/res/android"
   android:interpolator="@android:anim/decelerate_interpolator">
   <translate android:fromXDelta="0" android:toXDelta="-5%p" 
      android:duration="100"/>
   <translate android:fromXDelta="-5%p" android:toXDelta="5%p" 
      android:duration="100" android:startOffset="100"/>
   <translate android:fromXDelta="5%p" android:toXDelta="-5%p" 
      android:duration="100" android:startOffset="200"/>
</set>

/// usage
<hi> setRepeatCount </hi>
private Animation shakeAnimation; // animation for incorrect guess
shakeAnimation = AnimationUtils.loadAnimation(this, R.anim.incorrect_shake); 
shakeAnimation.setRepeatCount(3); // animation repeats 3 times 

/// Malaysia.png is stored at assets/Asia/Malaysia.png
private ImageView flagImageView; // displays a flag
flagImageView = (ImageView) findViewById(R.id.flagImageView);
AssetManager assets = getAssets(); // get app's AssetManager
InputStream stream; // used to read in flag images
stream = assets.open("Asia/Malaysia.png");
/// the second param of createFromStream is for debug purpose only
Drawable flag = Drawable.createFromStream(stream, "Malaysia");
flagImageView.setImageDrawable(flag);
flagImageView.startAnimation(shakeAnimation);


[ ---  end  ---- ]
