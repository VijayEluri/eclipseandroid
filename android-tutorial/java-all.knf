=== [ linux:topic ][ jar ] ===
[ --- start ---- ]
[ jar ][ list classes ]
jar tf jar-file
[ ---  end  ---- ]

=== [ java:topic ][ general ] ===
[ --- start ---- ]
[ ---  end  ---- ]

=== [ java:topic ][ type ] ===
[ --- start ---- ]
Boolean (value is true or false)
null is null
[ ---  end  ---- ]

=== [ java:topic ][ random ] ===
[ --- start ---- ]
int random_max = 8;
/// return 0(inclusive)-random_max(exclusive)
/// in this example, will return 0-7
int randomIndex = random.nextInt(random_max); // random index
[ ---  end  ---- ]

=== [ java:topic ][ Collection ] ===
[ --- start ---- ]
String[] alpha = { "A", "E", "I", "O", "U" };
List list = new ArrayList(alpha);
Collections.shuffle(list);
System.out.println("list");
[ ---  end  ---- ]

=== [ java:topic ][ example random ] ===
[ --- start ---- ]
Collections.shuffle(fileNameList); // shuffle file names

// put the correct answer at the end of fileNameList
/// so fill in everything then replace one of it with answer
int correct = fileNameList.indexOf(correctAnswer);
fileNameList.add(fileNameList.remove(correct));

[ ---  end  ---- ]

=== [ java:topic ][ implement ] ===
[ --- start ---- ]
interface Bounceable{
	public void setBounce(int bounce);
	public int getBounce();
}

public class FootBall implements Bounceable{
	private int bounce;
	public void setBounce(int bounce){ this.bounce = bounce; }
	public int getBounce(){ return this.bounce; }
}

public class BaseBall implements Bounceable{
	private int bounce;
	public void setBounce(int bounce){ this.bounce = bounce; }
	public int getBounce(){ return this.bounce; }
}
[ ---  end  ---- ]

=== [ topic ][ extends vs implements ] ===
[ --- start ---- ]
- extends class
- cannot extends multiple classes 
- implements interface
- can implements multiple interfaces
- interface cannot have implementation of method
[ ---  end  ---- ]

=== [ topic ][ valueOf ] ===
[ --- start ---- ]
/// return the string value from various object type
import java.io.*;

public class Test{
   public static void main(String args[]){
      double d = 102939939.939;
      boolean b = true;
      long l = 1232874;
      char[] arr = {'a', 'b', 'c', 'd', 'e', 'f','g' };

      System.out.println("Return Value : " + String.valueOf(d) );
      System.out.println("Return Value : " + String.valueOf(b) );
      System.out.println("Return Value : " + String.valueOf(l) );
      System.out.println("Return Value : " + String.valueOf(arr) );
   }
}
[ ---  end  ---- ]

=== [ topic ][ switch ][ string ] ===
[ --- start ---- ]
public String getTypeOfDayWithSwitchStatement(String dayOfWeekArg) {
     String typeOfDay;
     switch (dayOfWeekArg) {
         case "Monday":
             typeOfDay = "Start of work week";
             break;
         case "Tuesday":
         case "Wednesday":
         case "Thursday":
             typeOfDay = "Midweek";
             break;
         case "Friday":
             typeOfDay = "End of work week";
             break;
         case "Saturday":
         case "Sunday":
             typeOfDay = "Weekend";
             break;
         default:
             throw new IllegalArgumentException("Invalid day of the week: " + dayOfWeekArg);
     }
     return typeOfDay;
}
[ ---  end  ---- ]
