=== [ topic ][ library to install ] ===
[ --- start ---- ]
freeglut3 freeglut3-dev libglew1.5 libglew1.5-dev libglu1-mesa libglu1-mesa-dev libgl1-mesa-glx libgl1-mesa-dev

g++ test.c -o test -lglut -lGL -lGLU -lGLEW

#include <GL/glew.h>
#include <GL/glut.h>
#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glext.h>
[ ---  end  ---- ]

=== [ topic ][ coordinates ] ===
[ --- start ---- ]
use the Right Hand Rule:
X is your thumb
Y is your index
Z is your middle finger. If you put your thumb to the right and your index to 
the sky, it will point to your back, too.

2)
We will now have (x,y,z,w) vectors.

If w == 1, then the vector (x,y,z,1) is a position in space.
If w == 0, then the vector (x,y,z,0) is a direction.
(In fact, remember this forever.)

What difference does this make ? Well, for a rotation, it doesn’t change 
anything. When you rotate a point or a direction, you get the same result. 
However, for a translation (when you move the point in a certain direction), 
things are different. What could mean “translate a direction” ? Not much.

3)
Transformation matrix
Matrix x Vertex = TransformedVertex
( 1 2 7 )   (v1)   (1v1 2v2 7v3)
( 3 4 8 ) x (v2) = (3v1 4v2 8v3)
( 5 6 9 )   (v3)   (5v1 6v2 9v3)

[ ---  end  ---- ]


=== [ topic ][ API explains ] ===
[ --- start ---- ]
explanation:
The following lines set the screen up for a perspective view. Meaning things in 
the distance get smaller. This creates a realistic looking scene. The 
perspective is calculated with a 45 degree viewing angle based on the windows 
width and height. The 0.1f, 100.0f is the starting point and ending point for 
how deep we can draw into the screen.

glMatrixMode(GL_PROJECTION) indicates that the next 2 lines of code will affect 
the projection matrix. The projection matrix is responsible for adding 
perspective to our scene. glLoadIdentity() is similar to a reset. It restores 
the selected matrix to it's original state. After glLoadIdentity() has been 
called we set up our perspective view for the scene. glMatrixMode(GL_MODELVIEW) 
indicates that any new transformations will affect the modelview matrix. The 
modelview matrix is where our object information is stored. Lastly we reset the 
modelview matrix. Don't worry if you don't understand this stuff, I will be 
explaining it all in later tutorials. Just know that it HAS to be done if you 
want a nice perspective scene.

When you do a glLoadIdentity() what you are doing is moving back to the center 
of the screen with the X axis running left to right, the Y axis moving up and 
down, and the Z axis moving into, and out of the screen.

/// start of code
gl.glViewport(0, 0, width, height);   // Reset The Current Viewport
glMatrixMode(GL_PROJECTION);                        // Select The Projection Matrix
glLoadIdentity();                           // Reset The Projection Matrix

// Calculate The Aspect Ratio Of The Window
gluPerspective(45.0f,(GLfloat)width/(GLfloat)height,0.1f,100.0f);

// Select the model-view matrix to manipulate objects (Deselect the projection matrix)
glMatrixMode(GL_MODELVIEW);                     // Select The Modelview Matrix
glLoadIdentity();                           // Reset The Modelview Matrix
/// end of code
[ ---  end  ---- ]

[ --- start ---- ]
glShadeModel(GL_SMOOTH);                        // Enables Smooth Shading
[ ---  end  ---- ]

[ --- start ---- ]/// [ color ]
The following line sets the color of the screen when it clears. If you don't 
know how colors work, I'll quickly explain. The color values range from 0.0f to 
1.0f. 0.0f being the darkest and 1.0f being the brightest. The first parameter 
after glClearColor is the Red Intensity, the second parameter is for Green and 
the third is for Blue. The closer the number is to 1.0f, the brighter that 
specific color will be. The last number is an Alpha value. When it comes to 
clearing the screen, we wont worry about the 4th number. For now leave it at 
0.0f. I will explain its use in another tutorial.

You create different colors by mixing the three primary colors for light (red, 
green, blue). Hope you learned primaries in school. So, if you had 
glClearColor(0.0f,0.0f,1.0f,0.0f) you would be clearing the screen to a bright 
blue. If you had glClearColor(0.5f,0.0f,0.0f,0.0f) you would be clearing the 
screen to a medium red. Not bright (1.0f) and not dark (0.0f). To make a white 
background, you would set all the colors as high as possible (1.0f). To make a 
black background you would set all the colors to as low as possible (0.0f).

glClearColor(0.0f, 0.0f, 0.0f, 0.0f);                   // Black Background
[ ---  end  ---- ]

[ --- start ---- ] /// [ depth ]
The next three lines have to do with the Depth Buffer. Think of the depth 
buffer as layers into the screen. The depth buffer keeps track of how deep 
objects are into the screen. We won't really be using the depth buffer in this 
program, but just about every OpenGL program that draws on the screen in 3D 
will use the depth buffer. It sorts out which object to draw first so that a 
square you drew behind a circle doesn't end up on top of the circle. The depth 
buffer is a very important part of OpenG

glClearDepth(1.0f);                         // Depth Buffer Setup
glEnable(GL_DEPTH_TEST);                        // Enables Depth Testing
glDepthFunc(GL_LEQUAL);                         // The Type Of Depth Test To Do
[ ---  end  ---- ]

[ --- start ---- ]
Next we tell OpenGL we want the best perspective correction to be done. This 
causes a very tiny performance hit, but makes the perspective view look a bit 
better.
glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);          // Really Nice Perspective Calculations
[ ---  end  ---- ]

[ --- start ---- ]
glTranslatef(-1.5f,0.0f,-6.0f);                 // Move Left 1.5 Units And Into The Screen 6.0
[ ---  end  ---- ]

[ --- start ---- ]
Typically if you want 3 points, use GL_TRIANGLES. Drawing triangles is fairly 
fast on most video cards. If you want 4 points use GL_QUADS to make life 
easier. From what I've heard, most video cards render objects as triangles 
anyways
[ ---  end  ---- ]

=== [ topic ][ debug ] ===
[ --- start ---- ]
Help With Debugging
GLSurfaceView has a handy built-in feature for debugging OpenGL ES 
applications: the GLSurfaceView.setDebugFlags() method can be used to enable 
logging and/or error checking your OpenGL ES calls. Call this method in your 
GLSurfaceView's constructor, before calling setRenderer():

public ClearGLSurfaceView(Context context) {
    super(context);
    // Turn on error-checking and logging
    setDebugFlags(DEBUG_CHECK_GL_ERROR | DEBUG_LOG_GL_CALLS);
    mRenderer = new ClearRenderer();
    setRenderer(mRenderer);
}
[ ---  end  ---- ]

=== [ topic ][ render when dirty ] ===
[ --- start ---- ]
Continuous Rendering vs. Render When Dirty

Most 3D applications, such as games or simulations, are continuously animated. 
But some 3D applications are more reactive: they wait passively until the user 
does something, and then react to it. For those types of applications, the 
default GLSurfaceView behavior of continuously redrawing the screen is a waste 
of time. If you are developing a reactive application, you can call 
GLSurfaceView.setRenderMode(RENDERMODE_WHEN_DIRTY), which turns off the 
continuous animation. Then you call GLSurfaceView.requestRender() whenever you 
want to re-render.
[ ---  end  ---- ]

=== [ topic ][ movement ] ===
[ --- start ---- ]
glTranslatef(1,2,3);
glScalef(10,10,10);
glRotatef(45,1,0,0);
drawObject();

will first rotate 45 degrees about the x axis, then scale the object to 
(10,10,10), then translate to (1,2,3). However, you also have to remember that 
any transformation you apply affects transformations further down the line. If 
we reverse the order of the above transformations, the rotation will then 
rotate about a different point.
[ ---  end  ---- ]


=== [ topic ][ color ] ===
[ --- start ---- ]
/// display whole as one color
 public boolean onTouchEvent(final MotionEvent event) {
        queueEvent(new Runnable(){
            public void run() {
                mRenderer.setColor(event.getX()/getWidth(),
                        event.getY()/getHeight(), 1.0f);
            }
        });
        return true;
    }

class RenderColor implements GLSurfaceView.Renderer { ... }
mRenderer = new RenderColor();
[ ---  end  ---- ]

[ --- start ---- ]
/// set color on one object only

public class DrawShapeTriangle {
	public void draw(GL10 gl) {
		...
	gl.glColor4f(0.5f, 0.5f, 1.0f, 1.0f);      // Set the current color
		...
} }
[ ---  end  ---- ]

[ --- start ---- ]
/// set a few colors
public class DrawShapeSquare {
 private float[] colors = {
            1.0f, 0.0f, 0.0f, 1.0f,     // red
            0.0f, 1.0f, 0.0f, 1.0f,     // green
            0.0f, 0.0f, 1.0f, 1.0f      // blue
    };

public DrawShapeSquare() {
// setup color array
ByteBuffer byteBuf = ByteBuffer.allocateDirect(colors.length * 4);
byteBuf.order(ByteOrder.nativeOrder());
colorBuffer = byteBuf.asFloatBuffer();
colorBuffer.put(colors);
colorBuffer.position(0);

// color
gl.glEnableClientState(GL10.GL_COLOR_ARRAY);
gl.glColorPointer(4, GL10.GL_FLOAT, 0, colorBuffer);

// Draw the vertices as triangle strip
gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP, 0, vertices.length/3);

// disable the client state before leaving
gl.glDisableClientState(GL10.GL_COLOR_ARRAY);
}
[ ---  end  ---- ]

=== [ topic ][ API ] ===
[ --- start ---- ]
	glViewport(x, y, width, height)
x, y : Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
	 : Specify the width and height of the viewport. 
[ ---  end  ---- ]

=== [ topic ][ book ][ Pro Android ][ API ] ===
[ OpenGL ES ]
[ --- start ---- ]
- OpenGL ES is smaller version of OpenGL
- doesn't have primitive shapes of rectangles, only triangles
- OpenGL allows to specify each point separately
[ ---  end  ---- ]

[ API ]
[ --- start ---- ]
- glVertexPointer
- glDrawElements
- glColor
- glClear
- gluLookAt
- glFrusum
- glViewport
[ ---  end  ---- ]

[ API ][ glVertexPointer ]
[ --- start ---- ]
- speciy array of points to be drawn
- the coordinates unit can be anything. Bounding box will quantifies these coordinates
- Bounding box = bounding volume = viewing volume = viewing box = frusum
- glVertexPointer takes a native buffer for efficiency
- so need to convert float points into native buffer
[ ---  end  ---- ]

[ API ][ glDrawElements ]
[ --- start ---- ]
- after specify points through glVertexPointer, use glDrawElements to draw
- OpenGL is a state machine, it remembers the values set by one method
  when it invokes the next method in a cumulative manner
- so don't need to explicitly pass the points set by glVertexPointer to glDrawElements
- glDrawElements is generally faster than glDrawArrays, as reused points won't be sent
- if given same data, glDrawArrays is faster than glDrawElements??
- GL_TRIANGLE_STRIP is to add new points while making use of old ones. 
- e.g. specify 4 points in array, use strips to draw the first trianble out of (1,2,3) and the second one out of (2,3,4)
- each new point add a new triangle
- GL_TRIANGLE_FAN applies to trianbles where the first  point is used as the starting point for all subsequent trianbles.
- GL_TRIANGLE_FAN is essentially making a FAN- or circle- like object with the first vertex in the middle
- GL_TRIANGLE_FAN: suppose have 6 points (1,2,3,4,5,6). so the triangle will be drawn at (1,2,3), (1,3,4),(1,4,5),(1,5,6)
- every new point adds an extra triangle
- use glDrawArrays() to render from the vertex array directly,
- or glDrawElements() to render via an index array.
[ ---  end  ---- ]

[ API ][ glVertexPointer ][ glDrawElements ]
[ --- start ---- ]
private float vertices[] = {
		0.0f , 1.0f , 0.0f,
		-1.0f, -1.0f, 0.0f,
		1.0f , -1.0f, 0.0f
};

// A float is represented by 32 bits, which equals four bytes.
// java doesn't have sizeof API to check float size
ByteBuffer byteBuf = ByteBuffer.allocateDirect(vertices.length*4);
byteBuf.order(ByteOrder.nativeOrder());
vertexBuffer = byteBuf.asFloatBuffer();
vertexBuffer.put(vertices);
vertexBuffer.position(0);

// point to our vertex buffer
// glVertexPointer(
// param1: using (x,y) or (x,y,z) in each point)
// param2: each value is a float value in buffer
// param3: between two points there is no space (stride)
//         sometimes can add color attr as part of buffer after each point
//         if do that, then have to skip those color
// param4: pointer to the buffer containing the points
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);

private byte[] indices = { 0, 1, 2 };
private ByteBuffer indexBuffer;
// Setup index-array buffer. Indices in byte.
indexBuffer = ByteBuffer.allocateDirect(indices.length);
indexBuffer.put(indices);
indexBuffer.position(0);

// Draw the vertices as triangle strip
// as glDrawArrays send all data, no need to specify index buffer
// gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP, 0, vertices.length/3);
// glDrawElements (
// param1: type of shape (GL_10.GL_TRIANGLE_STRIP, GL10.GL_POINTS, GL_LINE_STRIP, GL_LINES, GL_LINE_LOOP, GL_TRIANBLES, GL_TRIANGLE_FAN)
// STRIP means reuse old points
// param2: number of indices
// param3: how big each index is
// param4: buffer containing the 3 indices
gl.glDrawElements(GL10.GL_TRIANGLE_STRIP, 3, GL10.GL_UNSIGNED_SHORT, indexBuffer);
[ ---  end  ---- ]

[ API ][ glClear ]
[ --- start ---- ]
- erase drawing surface
- reset color: GL_COLOR_BUFFER_BIT
  color buffer: responsible for the pixels that are visible, so clearing it = erasing the surface of any colors
- reset depth GL_DEPTH_BUFFER_BIT
  depth: refers to all pixels that are visible in a 3D scene, depending how far or close the obj is 
- reset stencil: GL_STENCIL_BUFFER_BIT
[ ---  end  ---- ]

[ API ][ glColor ]
[ --- start ---- ]
- set the default color for the subsequent drawing
/// set red to semi-transparent
glColor4f(1.0f, 0, 0, 0.5f)
[ ---  end  ---- ]

[ concept ][ gluLookAt ]
[ --- start ---- ]
- specify the position the camera is placed
- specify the look-at-point of camera (direction of camera pointing)
- specify the Up vector ( up, down, slanted)
  (0, 1,0) - a point away from the origin along the y -axis going up
  (0,-1,0) - camera at upside down
  (0,15,0) - have the same effect as (0,1,0)

/// camera is placed at 5 unit along +ve z axis
/// and looking at the origin 0,0,0
/// and the camera is at up position)
gluLookAt(gl,   0,0,5,     0,0,0,     0,1,0)
[ ---  end  ---- ]

[ concept ][ glFrustum ]
[ --- start ---- ]
- viewing volume, determines object how near and how far should be captured
- anything inside the frustum will be captured, anything outside will be ignored
- if specify near point of 50 and far point of 200, will capture everything between those points and box depth = 150
- can imagine the box in perspective projection or orthographic projection
- perspective projection: natural camera-like function
- orthographic suited for geometrical drawing that preserve size despite distance from camera

/// calculate the aspect ratio
/// we will scale height of viewing box to window height
/// so need to know the ratio of width to height
float ratio = (float) w/h;

/// perspective projection
glMatrixMode(GL10.GL_PROJECTION);

/// glFrustumf(
///   param1: left side of viewing box
///   param2: right side of viewing box
///   param3: top of viewing box
///   param4: bottom of viewing box
///   param5: how far is the front of the box from the camera
///   param6: how far is the back of the box from the camera
/// the height of the box is from -1 to 1, so 2 unit.
/// if the window or view size is 100pixel, every unit logical unit of 1 in the world coordinates translates to 50pixels in screen
/// we set camera at (0,0,5) and pointing towards (0,0,0)
/// so 3 units from camera towards origin will be (0,0,2)
/// and 7 units from the camera will be (0,0, -2)
gl.glFrustumf(-ratio, ratio, 1, -1, 3, 7)
[ ---  end  ---- ]

[ API ][ glViewport ]
[ --- start ---- ]
- responsible for specifying the rectangular area on the screen onto which the viewing volume will be projected

/// param1: lower left "x" of the rectangle on the screen
/// param2: lower left "y" of the rectangle on the screen
/// param3: width of rectangle
/// param3: height of rectangle
/// if window or view size is 100 pixels in height, and frustum height is 10 units, 
/// then every logical unit of 1 in the world coordiinates translates to 10 pixels in the screen coordinates
glViewport(0, 0, width, height)
[ ---  end  ---- ]
